第二部分：并工具类
一、Lock 和 Condition ：隐藏在并发包中的管程
 What:问题引入：
 并发的两大核心问题：
 1、互斥：同一时刻只允许一个线程访问共享资源
 2、同步：线程之间如何通信、协作

 How：Lock 和 Condition 两个接口实现管程，其中Lock用于解决互斥问题，Condition用于解决同步问题。


 Why:已经有synchronized,为什么引入lock和condition
  死锁问题中的破坏不可抢占条件synchronized无法解决。因为synchronized申请资源的时候，如果申请不到，线程直接进入阻塞状态了，
  而线程进入阻塞状态，啥都干不了，也不释放已经占有的资源。但我们期望：对于不可抢占条件，占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放他占有的资源，
  这样不可抢占这个条件就被破坏掉了。

  重新设计互斥锁的三种方案：
  1、能够响应中断
  2、支持超时
  3、非阻塞的获取锁
  Lock接口：
  // 支持中断的 API
  void lockInteruptibly()
    throws InterruptedException;
  // 支持超时的 API
  boolean tryLock(long time, TimeUnit unit)
    throws InterruptedException;
  // 支持非阻塞获取锁的 API
  boolean tryLock();

  如何保证可见性：利用了volatile相关的Happen-Before规则。
   1、顺序性规则
   2、volatile变量规则
   3、传递性规







